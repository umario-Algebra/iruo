#!/bin/bash
set -e

RC_FILE="/etc/kolla/demo-openrc.sh"
if [[ -f "$RC_FILE" ]]; then
    source "$RC_FILE"
else
    echo "Nema $RC_FILE!"
    exit 1
fi

TAG="course=test"
CSV_FILE="osobe.csv"
KEYPAIR="labkey"
FLAVOR="m1.medium"
VOLUME_SIZE=1
EXT_NET="public"

echo "== 0. Kreiram projekte =="
for proj in instruktor student1 student2; do
    if ! openstack project show $proj &>/dev/null; then
        openstack project create $proj --tag $TAG
        echo "Kreiran projekt: $proj"
    else
        echo "Projekt $proj već postoji"
    fi
done

echo "== 0.1 Kreiram grupe =="
if ! openstack group show studenti &>/dev/null; then openstack group create studenti; fi
if ! openstack group show instruktori &>/dev/null; then openstack group create instruktori; fi

echo "== 0.2 Kreiram korisnike iz CSV-a i dodjeljujem u projekte i grupe =="
if [[ ! -f "$CSV_FILE" ]]; then
    echo "CSV datoteka $CSV_FILE ne postoji!"
    exit 2
fi

tail -n +2 "$CSV_FILE" | while IFS=';' read -r ime prezime rola; do
    USERNAME="${ime}.${prezime}"
    EMAIL="${USERNAME}@cloudlearn.local"
    PASSWORD="TestPSW80!"
    if ! openstack user show "$USERNAME" &>/dev/null; then
        if [[ "$rola" == "instruktor" ]]; then
            openstack user create --project instruktor --password "$PASSWORD" --email "$EMAIL" "$USERNAME"
            openstack group add user instruktori "$USERNAME"
            openstack role add --user "$USERNAME" --project instruktor admin
            for sproj in student1 student2; do
                openstack role add --user "$USERNAME" --project $sproj admin
            done
        else
            STUDPROJ="student1"
            [[ "$USERNAME" == "iva.ivic" ]] && STUDPROJ="student2"
            openstack user create --project $STUDPROJ --password "$PASSWORD" --email "$EMAIL" "$USERNAME"
            openstack group add user studenti "$USERNAME"
            openstack role add --user "$USERNAME" --project $STUDPROJ member
        fi
        echo "Korisnik $USERNAME kreiran i postavljen."
    else
        echo "Korisnik $USERNAME već postoji, preskačem."
    fi
done

echo "== 1. Kreiram mreže, rutere, subnetove =="
declare -A networks=(
    [instruktor-net]="10.20.0.0/24"
    [student1-net]="10.30.0.0/24"
    [student2-net]="10.40.0.0/24"
    [minio-net]="10.50.0.0/24"
)
for net in "${!networks[@]}"; do
    cidr="${networks[$net]}"
    project="instruktor"
    [[ $net == student1* ]] && project="student1"
    [[ $net == student2* ]] && project="student2"
    [[ $net == minio* ]] && project="instruktor"
    # Kreiraj mrežu (sharean je samo minio-net)
    shareopt=""
    [[ $net == minio-net ]] && shareopt="--share"
    if ! openstack network show $net &>/dev/null; then
        openstack network create --project $project $shareopt --tag $TAG $net
    fi
    subnet="${net}-subnet"
    if ! openstack subnet show $subnet &>/dev/null; then
        openstack subnet create --network $net --subnet-range $cidr --tag $TAG $subnet
    fi
    router="${net}-router"
    if ! openstack router show $router &>/dev/null; then
        openstack router create --project $project $router
    fi
    # Attach subnet to router
    if ! openstack router show $router -f json | grep -q "$(openstack subnet show $subnet -f value -c id)"; then
        openstack router add subnet $router $subnet
    fi
    if [[ "$(openstack router show $router -f value -c external_gateway_info)" != *$EXT_NET* ]]; then
        openstack router set $router --external-gateway $EXT_NET
    fi
done

echo "== 2. Kreiram security grupe =="
for proj in instruktor student1 student2; do
    if ! openstack security group show student-secgroup-$proj &>/dev/null; then
        openstack security group create --project $proj student-secgroup-$proj --description "Za studente $proj"
        openstack security group rule create --proto icmp student-secgroup-$proj
        openstack security group rule create --proto tcp --dst-port 22 student-secgroup-$proj
        openstack security group rule create --proto tcp --dst-port 80 student-secgroup-$proj
        openstack security group rule create --proto tcp --dst-port 443 student-secgroup-$proj
        openstack security group rule create --proto tcp --dst-port 2049 student-secgroup-$proj
        openstack security group rule create --proto udp --dst-port 2049 student-secgroup-$proj
        openstack security group rule create --proto tcp --dst-port 9000 student-secgroup-$proj
    fi
done
# Instruktor secgroup
if ! openstack security group show instruktor-secgroup &>/dev/null; then
    openstack security group create --project instruktor instruktor-secgroup
    openstack security group rule create --proto icmp instruktor-secgroup
    openstack security group rule create --proto tcp --dst-port 22 instruktor-secgroup
    openstack security group rule create --proto tcp --dst-port 80 instruktor-secgroup
    openstack security group rule create --proto tcp --dst-port 443 instruktor-secgroup
    openstack security group rule create --proto tcp --dst-port 2049 instruktor-secgroup
    openstack security group rule create --proto udp --dst-port 2049 instruktor-secgroup
    openstack security group rule create --proto tcp --dst-port 9000 instruktor-secgroup
fi

echo "== 3. Kreiram portove =="
declare -A ports
declare -A fixed_ips=(
    [instruktor]="10.20.0.10"
    [student1-jumphost]="10.30.0.10"
    [student2-jumphost]="10.40.0.10"
    [student1-wp1]="10.30.0.21"
    [student1-wp2]="10.30.0.22"
    [student1-lb]="10.30.0.11"
    [student2-wp1]="10.40.0.21"
    [student2-wp2]="10.40.0.22"
    [student2-lb]="10.40.0.11"
    [minio]="10.50.0.11"
)
declare -A minio_ips=(
    [student1-wp1]="10.50.0.21"
    [student1-wp2]="10.50.0.22"
    [student2-wp1]="10.50.0.23"
    [student2-wp2]="10.50.0.24"
)
# Primarni portovi za sve VM-ove
for vm in instruktor student1-jumphost student2-jumphost \
          student1-wp1 student1-wp2 student1-lb \
          student2-wp1 student2-wp2 student2-lb minio; do
    net=""
    [[ $vm == instruktor ]] && net="instruktor-net"
    [[ $vm == student1-* ]] && net="student1-net"
    [[ $vm == student2-* ]] && net="student2-net"
    [[ $vm == minio ]] && net="minio-net"
    ip="${fixed_ips[$vm]}"
    portname="${vm}-primarni-port"
    proj="instruktor"
    [[ $vm == student1-* ]] && proj="student1"
    [[ $vm == student2-* ]] && proj="student2"
    [[ $vm == minio ]] && proj="instruktor"
    if ! openstack port show "$portname" &>/dev/null; then
        ports[$vm]=$(openstack port create --project $proj --network $net --fixed-ip ip-address=$ip "$portname" -f value -c id)
    else
        ports[$vm]=$(openstack port show "$portname" -f value -c id)
    fi
done
# Sekundarni portovi za WP na minio-net
for vm in student1-wp1 student1-wp2 student2-wp1 student2-wp2; do
    ip="${minio_ips[$vm]}"
    portname="${vm}-minio-port"
    if ! openstack port show "$portname" &>/dev/null; then
        ports[$portname]=$(openstack port create --project instruktor --network minio-net --fixed-ip ip-address=$ip "$portname" -f value -c id)
    else
        ports[$portname]=$(openstack port show "$portname" -f value -c id)
    fi
done

echo "== 4. Kreiram VM-ove =="
declare -A vm_proj=(
    [instruktor]=instruktor
    [minio]=instruktor
    [student1-jumphost]=student1
    [student1-lb]=student1
    [student1-wp1]=student1
    [student1-wp2]=student1
    [student2-jumphost]=student2
    [student2-lb]=student2
    [student2-wp1]=student2
    [student2-wp2]=student2
)
declare -A vm_image=(
    [instruktor]="ubuntu-jammy"
    [minio]="minio-golden"
    [student1-jumphost]="ubuntu-jammy"
    [student1-lb]="lb-golden"
    [student1-wp1]="wp-golden"
    [student1-wp2]="wp-golden"
    [student2-jumphost]="ubuntu-jammy"
    [student2-lb]="lb-golden-test3"
    [student2-wp1]="wp-golden"
    [student2-wp2]="wp-golden"
)
declare -A vm_secgroup=(
    [instruktor]="instruktor-secgroup"
    [minio]="instruktor-secgroup"
    [student1-jumphost]="student-secgroup-student1"
    [student1-lb]="student-secgroup-student1"
    [student1-wp1]="student-secgroup-student1"
    [student1-wp2]="student-secgroup-student1"
    [student2-jumphost]="student-secgroup-student2"
    [student2-lb]="student-secgroup-student2"
    [student2-wp1]="student-secgroup-student2"
    [student2-wp2]="student-secgroup-student2"
)
for vm in "${!vm_proj[@]}"; do
    extra_nics=""
    if [[ $vm == student1-wp1 || $vm == student1-wp2 ]]; then
        extra_nics="--nic port-id=${ports[${vm}-minio-port]}"
    fi
    if [[ $vm == student2-wp1 || $vm == student2-wp2 ]]; then
        extra_nics="--nic port-id=${ports[${vm}-minio-port]}"
    fi
    if ! openstack server show $vm &>/dev/null; then
        openstack server create --project "${vm_proj[$vm]}" \
          --flavor "$FLAVOR" \
          --image "${vm_image[$vm]}" \
          --nic port-id=${ports[$vm]} $extra_nics \
          --key-name "$KEYPAIR" \
          --security-group "${vm_secgroup[$vm]}" \
          --tag "$TAG" \
          "$vm"
    fi
done

echo "== 5. Attacham diskove na WP-ove =="
for vm in student1-wp1 student1-wp2 student2-wp1 student2-wp2; do
  for i in 1 2; do
    vol="${vm}-data-$i"
    proj="student1"
    [[ $vm == student2-* ]] && proj="student2"
    if ! openstack volume show "$vol" &>/dev/null; then
      openstack volume create --project $proj --size $VOLUME_SIZE "$vol"
    fi
    if ! openstack server volume list "$vm" | grep -q "$vol"; then
      openstack server add volume "$vm" "$vol" || echo "Volume $vol je već attachan na $vm, preskačem."
    fi
  done
done

echo "== 6. Dodajem floating IP na jumphostove =="
declare -A floating_ips=(
  [student1-jumphost]=192.168.10.123
  [student2-jumphost]=192.168.10.124
  [instruktor]=192.168.10.122
)
for vm in "${!floating_ips[@]}"; do
  FIP=${floating_ips[$vm]}
  if ! openstack floating ip show "$FIP" &>/dev/null; then
    openstack floating ip create --floating-ip-address "$FIP" public
  fi
  # Nađi port s ispravnim IP-em
  priv_ip="${fixed_ips[$vm]}"
  port_id=$(openstack port list --fixed-ip ip-address=$priv_ip -f value -c ID)
  if [[ -n "$port_id" ]]; then
    openstack server add floating ip "$vm" "$FIP"
  fi
done

echo "== Gotovo! Sve je kreirano =="
